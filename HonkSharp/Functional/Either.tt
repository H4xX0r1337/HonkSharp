using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace DeclarativeCSharp.Functional
{
<# const int COUNT = 16; #>
<# for (var i = 2; i <= COUNT; i++) { #>

<# var typePostfix = i is 2 ? "" : ""; #>

    [StructLayout(LayoutKind.Auto)]
    public readonly struct Either<#= typePostfix #><T1<# for (var t = 2; t <= i; t++) { #>, T<#= t #><# } #>>
    {
        private readonly byte index;
<# for (var t = 1; t <= i; t++) { #>
        private readonly T<#= t #> field<#= t #>;
<# } #>

        public TOut Switch<TCapture, TOut>(Func<T1, TCapture, TOut> case1<# for (var t = 2; t <= i; t++) { #>, Func<T<#= t #>, TCapture, TOut> case<#= t #><# } #>, TCapture capture)
            => index switch
            {
                <# for (var t = 1; t <= i  - 1; t++) { #>
<#= t #> => case<#= t #>(field<#= t #>, capture),
                <# } #>
_ => case<#= i #>(field<#= i #>, capture)
            };

        public TOut Switch<TOut>(Func<T1, TOut> case1<# for (var t = 2; t <= i; t++) { #>, Func<T<#= t #>, TOut> case<#= t #><# } #>)
            => index switch
            {
                <# for (var t = 1; t <= i  - 1; t++) { #>
<#= t #> => case<#= t #>(field<#= t #>),
                <# } #>
_ => case<#= i #>(field<#= i #>)
            };

<# for (var t = 1; t <= i; t++) { #>
        public Either<#= typePostfix #>(T<#= t #> value)
        {
<# for (var s = 1; s <= i; s++) { #>
            Unsafe.SkipInit(out field<#= s #>);
<# } #>
            field<#= t #> = value;
            index = <#= t #>;
        }
<# } #>


<# for (var t = 1; t <= i; t++) { #>
        public static implicit operator Either<#= typePostfix #><T1<# for (var s = 2; s <= i; s++) { #>, T<#= s #><# } #>>(T<#= t #> t)
            => new(t);  

        public static explicit operator T<#= t #>(Either<#= typePostfix #><T1<# for (var s = 2; s <= i; s++) { #>, T<#= s #><# } #>> t)
            => t.index is <#= t #> ? t.field<#= t #> : throw new InvalidCastException();
<# } #>

    }
<# } #>

}
